generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model policy {
  id             String          @id @default(cuid())
  title          String
  content        String          @db.Text
  type           String          // "privacy" or "terms"
  jurisdiction   String          // e.g., "EU", "US", "BG"
  version        String          // e.g., "1.0", "1.1"
  effectiveDate  DateTime
  lastReviewDate DateTime?
  status         policy_status   @default(ACTIVE)
  metadata       Json?           // Stores additional policy metadata
  history        policyHistory[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userId         String
  user           user            @relation(fields: [userId], references: [id])

  @@index([userId], map: "Policy_userId_fkey")
}

model policyHistory {
  id            String   @id @default(cuid())
  policyId      String
  policy        policy   @relation(fields: [policyId], references: [id])
  version       String
  content       String   @db.Text
  effectiveDate DateTime
  changes       String?  @db.Text  // Description of changes
  createdAt     DateTime @default(now())
  updatedBy     String?  // User who made the change

  @@index([policyId])
}

enum policy_status {
  DRAFT
  ACTIVE
  ARCHIVED
  SUPERSEDED
}

model subscription {
  id                   String              @id @default(cuid())
  userId               String              @unique
  user                 user                @relation(fields: [userId], references: [id])
  status               subscription_status @default(ACTIVE)
  plan                 subscription_plan   @default(FREE)
  currentPeriodStart   DateTime            @default(now())
  currentPeriodEnd     DateTime            @default(now())
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  stripeSubscriptionId String?             @unique

  @@index([stripeSubscriptionId])
  @@map("subscriptions")
}

model user {
  id               String        @id @default(cuid())
  name             String?
  email            String        @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  stripeCustomerId String?       @unique
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  policies         policy[]
  subscription     subscription?
}

enum subscription_status {
  ACTIVE
  CANCELED
  PAST_DUE
  TRIALING
}

enum subscription_plan {
  FREE
  PREMIUM
}
